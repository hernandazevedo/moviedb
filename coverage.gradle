apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.5'
}

def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', '**/*$*', 'android/**/*.*', '**/*Function*', '**/*_impl*']

task jacocoTestReport(type: JacocoReport, overwrite: true) {
    def mainSrc = "$project.projectDir/src/main/kotlin"
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)

    print("Test dir ${System.env.VDTESTING_DOWNLOADED_FILES_DIR}")
    print(file("${System.env.VDTESTING_DOWNLOADED_FILES_DIR}").exists())
    def dependencyTasks
//    if (project.plugins.hasPlugin('com.android.application')) {
//        dependencyTasks = ['testDebugUnitTest', 'createDebugCoverageReport']
//    } else
    if (project.plugins.hasPlugin("com.android.library") || project.plugins.hasPlugin('com.android.application')) {
        dependencyTasks = ['testDebugUnitTest']
    } else {
        debugTree = fileTree(dir: "$project.buildDir/classes/kotlin/main", excludes: fileFilter)
        dependencyTasks = ['test']
    }

    dependsOn {
        dependencyTasks
    }

    reports {
        xml.enabled = true
        html.enabled = true
    }

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])

    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', "/Users/hernand/Downloads/coverage.ec"
    ])

}


//rootProject.tasks.jacocoRootReport.dependsOn tasks.jacocoTestReport

//rootProject.tasks.jacocoMerge.mustRunAfter tasks.jacocoTestReport